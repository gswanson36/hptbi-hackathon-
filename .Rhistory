(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
df1 <- prepare_mortality_data(
training = T
)
prepare_mortality_data(
training = T
)
mortality_model <- function(data) {
##############################################################################
# User code starts here
rtn <-
glm(mortality ~ age + female + gcs_use + icpyn1,
data = data,
family = binomial())
# User code ends here
##############################################################################
class(rtn) <- c("hackathon_mortality_model", class(rtn))
rtn
}
################################################################################
# Predict Hackathon Mortality Model
#
# An S3 function call for hackathon_mortality_model
#
# Args:
#   object  a hackathon_mortality_model object
#   newdata a data.frame
#   ...     additional arguments passed through.  Not expected to be used as
#           part of the hackathon.
#
# Return:
#   A character vector of length equal to the nrow(newdata) with values
#   "Mortality" and "Alive"
#
predict.hackathon_mortality_model <- function(object, newdata, ...) {
##############################################################################
# User Defined data preparation code starts here
p <- stats::predict.glm(object, newdata, type = "response", ...)
ifelse(p > 0.25, "Mortality", "Alive")
}
knitr::opts_chunk$set(echo = TRUE)
prepare_mortality_data <- function(training = TRUE) {
# import the data set
if (!training & file.exists("./csvs/testing.csv")) {
hackathon_mortality_data <- read.csv(file = "./csvs/testing.csv")
} else {
hackathon_mortality_data <- read.csv(file = "./csvs/training.csv")
}
# Define the primary outcome -- do not edit this.  If you need the outcome in
# a different format, e.g., integer or logical, create an additional
# data.frame element in user defined code section below.
hackathon_mortality_data$mortality <-
as.integer(hackathon_mortality_data$hospdisposition == "Mortality")
# Omit some elements - FSS is omitted from this data set.  FSS could not be
# assessed for patients who died.  To reduce confusion FSS related elements
# are omitted as missing values for FSS are be highly correlated with
# mortality.
hackathon_mortality_data <-
hackathon_mortality_data[-grep("fss", names(hackathon_mortality_data))]
##############################################################################
# User Defined Code starts here
hackathon_mortality_data$gcs_use <-
ifelse(is.na(hackathon_mortality_data$gcsed),
yes = hackathon_mortality_data$gcsicu,
no  = hackathon_mortality_data$gcsed)
# deal with a possible missing value in icpyn1
if (any(hackathon_mortality_data$icpyn1)) {
# if all information about type of monitor is missing then mark icpyn1 as 0
flags <-
as.integer(
!(
(hackathon_mortality_data$icptype1 == "" | is.na(hackathon_mortality_data$icptype1)) &
(hackathon_mortality_data$icptype2 == "" | is.na(hackathon_mortality_data$icptype2)) &
(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
prepare_mortality_data(training = T)
str(prepare_mortality_data(training = T))
levels(prepare_mortality_data(training = T))
class(prepare_mortality_data(training = T))
dat1 <- prepare_mortality_data(training = T)
str(dat1)
is.character(dat1)
which(is.character(dat1[])
is.character(dat1)
dat1[,]
is.character(dat1[,])
is.character(dat1[,1:97])
class(dat1$studyid)
str(dat1)
```{r, include=F}
str(dat1)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
clid
length(clid)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
clid
unique(clid)
which(clid == "character")
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
#identify which variables are character, turn to factors
which(clid == "character")
dat1[,which(clid == "character")] <- as.factor(dat1[,which(clid == "character")])
str(dat1)
dat1 <- prepare_mortality_data(training = T)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
clid
dat1
dat1$injurymech <- as.factor(dat1$injurymech)
dat1
dat1 <- prepare_mortality_data(training = T)
str(dat1)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
cv <- which(clid == "character") #vector of character variables in the data frame
cv
length(cv)
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1[,cv[i]] <- as.factor(dat1[,cv[i]])
}
str(dat1)
cv[5]
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1[,cv[i]] <- as.factor(dat1[,cv[i]])
}
dat1
cv[1]
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
cv[1]
for (i in length(cv)) {
dat1[,(cv[i])] <- as.factor(dat1[,(cv[i]]))
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
cv[1]
for (i in length(cv)) {
dat1[,(cv[i])] <- as.factor(dat1[,(cv[i])])
}
dat1
dat1[,4] <- as.factor(dat1[,4])
dat1
colnames(dat1[, cv])
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1[,colnames(dat1[, cv[i]])] <- as.factor(dat1[,colnames(dat1[, cv[i]]))
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1[,colnames(dat1[, cv[i]])] <- as.factor(dat1[,colnames(dat1[, cv[i]]))
dat1[,colnames(dat1[, cv[1]])]
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1$(colnames(dat1[, cv[i]])) <- as.factor(dat1$(colnames(dat1[, cv[i]]))
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1$(colnames(dat1[, cv[i]])) <- as.factor(dat1$(colnames(dat1[, cv[i]])))
dat1$(colnames(dat1[, cv[1]]))
dat1$colnames(dat1[, cv[1]])
colnames(dat1[, cv[1]])
dat1 <- prepare_mortality_data(training = T)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1$(colnames(dat1[, cv[i]])) <- as.factor(dat1$(colnames(dat1[, cv[i]])))
dat1$colnames(dat1[, cv[1]])
colnames(dat1[, cv[1]])
colnames(dat1[,cv])
colnames(dat1[,cv[1]])
colnames(dat1[,cv])[1]
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
for (i in length(cv)) {
dat1$colnames(dat1[,cv])[i] <- as.factor(colnames(dat1[,cv])[i])
}
colnames(dat1[,cv])[1]
dat1$colnames(dat1[,cv])[1]
dat1$(colnames(dat1[,cv])[1])
dat1[,(colnames(dat1[,cv])[1])]
as.character(colnames(dat1[,cv])[1])
as.factor(colnames(dat1[,cv])[1])
as.factor(colnames(dat1[,cv])[1])[1]
dat1$as.factor(colnames(dat1[,cv])[1])
dat1$(as.factor(colnames(dat1[,cv])[1]))
dat1[,(colnames(dat1[,cv])[1])]
dat1[, 4] <- as.factor(dat1[,4])
dat1
dat1[,(colnames(dat1[,cv]))]
dat1[,
dat1[,(colnames(dat1[,cv]))]
dat1[,(colnames(dat1[,cv]))]
dat1[,(colnames(dat1[,cv]))]
dat1 <- prepare_mortality_data(training = T)
str(dat1)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
cv
(colnames(dat1[,cv]))
#identify which variables are character, turn to factors
cv <- which(clid == "character") #vector of character variables in the data frame
dat1$sourceinj <- as.factor(dat1$sourceinj)
dat1$injurymech <- as.factor(dat1$injurymech)
dat1$eddisposition <- as.factor(dat1$eddisposition)
dat1$sourceicu <- as.factor(dat1$sourceicu)
dat1$puplrcticu <- as.factor(dat1$puplrcticu)
dat1$icptype1 <- as.factor(dat1$icptype1)
dat1$icptype2 <- as.factor(dat1$icptype2)
dat1$icptype3 <- as.factor(dat1$icptype3)
dat1$cathtype1 <- as.factor(dat1$cathtype1)
dat1$cathtype2 <- as.factor(dat1$cathtype2)
dat1$cathtype3 <- as.factor(dat1$cathtype3)
dat1$cathtype4 <- as.factor(dat1$cathtype4)
dat1$hospdisposition <- as.factor(dat1$hospdisposition)
dat1
dat1
full <- glm(mortality ~ ., data = dat1, family = binomial())
complete.cases(dat1)
is.na.data.frame(dat1)
which(is.na.data.frame(dat1))
dat1[which(is.na.data.frame(dat1))] <- 0
which(is.na(dat1))
`is.na<-.factor`(dat1, 0)
`is.na<-.numeric_version`(dat1, 0)
`is.na<-`(dat1, 0)
knitr::opts_chunk$set(echo = TRUE)
prepare_mortality_data <- function(training = TRUE) {
# import the data set
if (!training & file.exists("./csvs/testing.csv")) {
hackathon_mortality_data <- read.csv(file = "./csvs/testing.csv")
} else {
hackathon_mortality_data <- read.csv(file = "./csvs/training.csv")
}
# Define the primary outcome -- do not edit this.  If you need the outcome in
# a different format, e.g., integer or logical, create an additional
# data.frame element in user defined code section below.
hackathon_mortality_data$mortality <-
as.integer(hackathon_mortality_data$hospdisposition == "Mortality")
# Omit some elements - FSS is omitted from this data set.  FSS could not be
# assessed for patients who died.  To reduce confusion FSS related elements
# are omitted as missing values for FSS are be highly correlated with
# mortality.
hackathon_mortality_data <-
hackathon_mortality_data[-grep("fss", names(hackathon_mortality_data))]
##############################################################################
# User Defined Code starts here
hackathon_mortality_data$gcs_use <-
ifelse(is.na(hackathon_mortality_data$gcsed),
yes = hackathon_mortality_data$gcsicu,
no  = hackathon_mortality_data$gcsed)
# deal with a possible missing value in icpyn1
if (any(hackathon_mortality_data$icpyn1)) {
# if all information about type of monitor is missing then mark icpyn1 as 0
flags <-
as.integer(
!(
(hackathon_mortality_data$icptype1 == "" | is.na(hackathon_mortality_data$icptype1)) &
(hackathon_mortality_data$icptype2 == "" | is.na(hackathon_mortality_data$icptype2)) &
(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
dat1 <- prepare_mortality_data(training = T)
str(dat1)
#Empty vector, find classes of each variable
clid <- rep(0, length(dat1[1, ]))
for (i in 1:length(clid)) {
clid[i] <- class(dat1[,i])
}
dat1
`is.na<-.factor`(dat1, 0)
`is.na<-`(dat1, 0)
`is.na<-`(dat1, 0)
is.na(dat1) <- 0
prepare_mortality_data <- function(training = TRUE) {
# import the data set
if (!training & file.exists("./csvs/testing.csv")) {
hackathon_mortality_data <- read.csv(file = "./csvs/testing.csv")
} else {
hackathon_mortality_data <- read.csv(file = "./csvs/training.csv")
}
# Define the primary outcome -- do not edit this.  If you need the outcome in
# a different format, e.g., integer or logical, create an additional
# data.frame element in user defined code section below.
hackathon_mortality_data$mortality <-
as.integer(hackathon_mortality_data$hospdisposition == "Mortality")
# Omit some elements - FSS is omitted from this data set.  FSS could not be
# assessed for patients who died.  To reduce confusion FSS related elements
# are omitted as missing values for FSS are be highly correlated with
# mortality.
hackathon_mortality_data <-
hackathon_mortality_data[-grep("fss", names(hackathon_mortality_data))]
##############################################################################
# User Defined Code starts here
hackathon_mortality_data$gcs_use <-
ifelse(is.na(hackathon_mortality_data$gcsed),
yes = hackathon_mortality_data$gcsicu,
no  = hackathon_mortality_data$gcsed)
# deal with a possible missing value in icpyn1
if (any(hackathon_mortality_data$icpyn1)) {
# if all information about type of monitor is missing then mark icpyn1 as 0
flags <-
as.integer(
!(
(hackathon_mortality_data$icptype1 == "" | is.na(hackathon_mortality_data$icptype1)) &
(hackathon_mortality_data$icptype2 == "" | is.na(hackathon_mortality_data$icptype2)) &
(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
dat1 <- prepare_mortality_data(training = T)
str(dat1)
dat1
str(dat1)
dat1[, is.integer(dat1)]
[, is.integer(dat1)]
dat1[, is.integer(dat1)]
is.integer(dat1)
is.integer(dat1)
is.integer(dat1[,.])
is.integer(dat1[,""])
which(is.integer(dat1))
prepare_mortality_data <- function(training = TRUE) {
# import the data set
if (!training & file.exists("./csvs/testing.csv")) {
hackathon_mortality_data <- read.csv(file = "./csvs/testing.csv")
} else {
hackathon_mortality_data <- read.csv(file = "./csvs/training.csv")
}
# Define the primary outcome -- do not edit this.  If you need the outcome in
# a different format, e.g., integer or logical, create an additional
# data.frame element in user defined code section below.
hackathon_mortality_data$mortality <-
as.integer(hackathon_mortality_data$hospdisposition == "Mortality")
# Omit some elements - FSS is omitted from this data set.  FSS could not be
# assessed for patients who died.  To reduce confusion FSS related elements
# are omitted as missing values for FSS are be highly correlated with
# mortality.
hackathon_mortality_data <-
hackathon_mortality_data[-grep("fss", names(hackathon_mortality_data))]
##############################################################################
# User Defined Code starts here
hackathon_mortality_data$gcs_use <-
ifelse(is.na(hackathon_mortality_data$gcsed),
yes = hackathon_mortality_data$gcsicu,
no  = hackathon_mortality_data$gcsed)
# deal with a possible missing value in icpyn1
if (any(hackathon_mortality_data$icpyn1)) {
# if all information about type of monitor is missing then mark icpyn1 as 0
flags <-
as.integer(
!(
(hackathon_mortality_data$icptype1 == "" | is.na(hackathon_mortality_data$icptype1)) &
(hackathon_mortality_data$icptype2 == "" | is.na(hackathon_mortality_data$icptype2)) &
(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# deal with a possible missing value in admittoicudc1, admittoicudc2, admittoicudc3
hackathon_mortality_data$admittoicudc1 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc1),
yes = 0,
no  = hackathon_mortality_data$admittoicudc1)
hackathon_mortality_data$admittoicudc2 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc2),
yes = 0,
no  = hackathon_mortality_data$admittoicudc2)
hackathon_mortality_data$admittoicudc3 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc3),
yes = 0,
no  = hackathon_mortality_data$admittoicudc3)
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
dat1 <- prepare_mortality_data(training = T)
str(dat1)
prepare_mortality_data <- function(training = TRUE) {
# import the data set
if (!training & file.exists("./csvs/testing.csv")) {
hackathon_mortality_data <- read.csv(file = "./csvs/testing.csv")
} else {
hackathon_mortality_data <- read.csv(file = "./csvs/training.csv")
}
# Define the primary outcome -- do not edit this.  If you need the outcome in
# a different format, e.g., integer or logical, create an additional
# data.frame element in user defined code section below.
hackathon_mortality_data$mortality <-
as.integer(hackathon_mortality_data$hospdisposition == "Mortality")
# Omit some elements - FSS is omitted from this data set.  FSS could not be
# assessed for patients who died.  To reduce confusion FSS related elements
# are omitted as missing values for FSS are be highly correlated with
# mortality.
hackathon_mortality_data <-
hackathon_mortality_data[-grep("fss", names(hackathon_mortality_data))]
##############################################################################
# User Defined Code starts here
hackathon_mortality_data$gcs_use <-
ifelse(is.na(hackathon_mortality_data$gcsed),
yes = hackathon_mortality_data$gcsicu,
no  = hackathon_mortality_data$gcsed)
# deal with a possible missing value in icpyn1
if (any(hackathon_mortality_data$icpyn1)) {
# if all information about type of monitor is missing then mark icpyn1 as 0
flags <-
as.integer(
!(
(hackathon_mortality_data$icptype1 == "" | is.na(hackathon_mortality_data$icptype1)) &
(hackathon_mortality_data$icptype2 == "" | is.na(hackathon_mortality_data$icptype2)) &
(hackathon_mortality_data$icptype3 == "" | is.na(hackathon_mortality_data$icptype3))
)
)
idx <- which(is.na(hackathon_mortality_data$icpyn1))
hackathon_mortality_data$icpyn1[idx] <- flags[idx]
}
# deal with a possible missing value in admittoicudc1, admittoicudc2, admittoicudc3
hackathon_mortality_data$admittoicudc1 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc1),
yes = 0,
no  = hackathon_mortality_data$admittoicudc1)
hackathon_mortality_data$admittoicudc2 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc2),
yes = 0,
no  = hackathon_mortality_data$admittoicudc2)
hackathon_mortality_data$admittoicudc3 <-
ifelse(is.na(hackathon_mortality_data$admittoicudc3),
yes = 0,
no  = hackathon_mortality_data$admittoicudc3)
hackathon_mortality_data$admittoicuadmit2 <-
ifelse(is.na(hackathon_mortality_data$admittoicuadmit2),
yes = 0,
no  = hackathon_mortality_data$admittoicuadmit2)
hackathon_mortality_data$admittoicuadmit3 <-
ifelse(is.na(hackathon_mortality_data$admittoicuadmit3),
yes = 0,
no  = hackathon_mortality_data$admittoicuadmit3)
# User Defined Code ends here
##############################################################################
hackathon_mortality_data
}
dat1 <- prepare_mortality_data(training = T)
str(dat1)
is.na.data.frame(dat1)
dat2 <-
ifelse(is.na.data.frame(dat1),
yes = 0,
no = dat1)
str(dat2)
dat2 <- dat1
dat2 <- dat1
dat2[is.na(dat2)] <- 0
dat2
str(dat2)
